// 2013-09-12 Yu Yahagi
// Test simulation of a 3D beam with two physical volume with different
// material parameters.

load "msh3"
load "medit"

//////////////////////////////////////////////////////////////////////////////
// Material parameters
//////////////////////////////////////////////////////////////////////////////
mesh3	Th = readmesh3("beam_2vol.mesh");
//plot(Th, wait=1);
string	filename = "test_beam.txt";
real E1 = 1.85e-22, nu1 = 0.28; // E [kg/(nm ps^2)] for the ellipse
real rho1 = 2.3290e-24;       // rho [kg/nm^3]
real lambda1 = E1*nu1/((1+nu1)*(1-2*nu1));
real mu1 = E1/(2*(1+nu1));
real E2 = 1.85e-22, nu2 = 0.28; // E [kg/(nm ps^2)] for the substrate
real rho2 = 2.3290e-24;       // rho [kg/nm^3]
real lambda2 = E2*nu2/((1+nu2)*(1-2*nu2));
real mu2 = E2/(2*(1+nu2));

//////////////////////////////////////////////////////////////////////////////
// Finite Element spaces, functions, and macros
//////////////////////////////////////////////////////////////////////////////
fespace Vh(Th, [P1,P1,P1]);
fespace VhScalar(Th, P1);
Vh [u1,u2,u3], [v1,v2,v3], [uu1,uu2,uu3], [uuu1,uuu2,uuu3];
Vh [ur1,ur2,ur3];			// For visualization
Vh [f1,f2,f3] = [0.0, 0.0, 0.0];	// Boundary condition at the bottom
VhScalar uAbs, ur, uphi;

real gravity = -0.1;

real sqrt2=sqrt(2.);
macro epsilon(u1,u2,u3)  [dx(u1),dy(u2),dz(u3),(dz(u2)+dy(u3))/sqrt2,(dz(u1)+dx(u3))/sqrt2,(dy(u1)+dx(u2))/sqrt2] // EOM
macro div(u1,u2,u3) ( dx(u1)+dy(u2)+dz(u3) ) // EOM

//////////////////////////////////////////////////////////////////////////////
// Problem
//////////////////////////////////////////////////////////////////////////////
cout << "E1 = " << E1 << ", nu1 = " << nu1 << ", rho1 = " << rho1 << ", mu1 = " << mu1 << ", lambda1 = " << lambda1 << endl;
cout << "E2 = " << E2 << ", nu2 = " << nu2 << ", rho2 = " << rho2 << ", mu2 = " << mu2 << ", lambda2 = " << lambda2 << endl;
//plot(Th, wait=1);

solve pulse([u1,u2,u3],[v1,v2,v3]) =
	int3d(Th)(
		lambda1*div(u1,u2,u3)*div(v1,v2,v3) + 2.*mu1*epsilon(u1,u2,u3)'*epsilon(v1,v2,v3)
	)
  - int3d(Th) (gravity*v3)
  + on(1, u1=0, u2=0, u3=0)
;

real dmax = u1[].max;
cout << "Max displacement = " << dmax << endl;
real coef = 0.4/dmax;
int[int] ref2=[1,0,2,0];
mesh3 Thm=movemesh3(Th,transfo=[x+u1*coef,y+u2*coef,z+u3*coef],label=ref2);
Thm=change(Thm,label=ref2);
plot(Th,Thm, wait=1,cmm="coef  amplification = "+coef );

